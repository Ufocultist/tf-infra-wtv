name: IAC(1)

on:
#  push:
#    branches:
#      - feature/**
#    tags-ignore:
#      - '**'
#  pull_request:
#    branches:
#      - main
#      - testing**
#    types:
#      - opened
#      - closed
#      - synchronize
#    tags-ignore:
#      - '**'
  workflow_dispatch:
    inputs:
      db_username:
        description: "Database Username"
        default: "user"
        required: true
      db_password:
        description: "Database Password"
        required: true
      db_root_password:
        description: "Root Password"
        required: true
      db_host:
        description: "Database Host"
        required: false
        default: "mariadb"
#      db_port:
#        description: "Database Port"
#        required: false
#        default: "3306"
      db_name:
        description: "Database Name"
        required: true
        default: "smotrish_db"
      flask_secret:
        description: "Flask Secret Key"
        default: "adsadaydoi38dhiu7w87dys7tasye2u7y77&@#3jd8UDOUD*#EDasdsaded3ss"
        required: true
      env:
        required: false
        default: dev
        description: "Environment"
      name:
        required: false
        default: wtv
        description: "App name"
      service:
        description: "Cloud Service for deploy(EKS/ECS Fargate)"
        type: choice
        options:
          - "EKS"
          - "ECS"
        default: "EKS"
      create_backend:
        description: "Create Terraform backend?"
        type: choice
        options:
          - "true"
          - "false"
        default: "false"


jobs:
  deploy:
    runs-on: ubuntu-latest

#    defaults:
#      run:
#        working-directory: ./${{ inputs.env }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.5

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Set up backend
      if: ${{ github.event.inputs.create_backend == 'true' }}
      run: |
        
        aws s3api create-bucket \
          --bucket ${{ inputs.env }}-${{ inputs.name }}-terraform-state-bucket \
          --region us-east-1 || true

        aws s3api put-bucket-versioning \
          --bucket ${{ inputs.env }}-${{ inputs.name }}-terraform-state-bucket \
          --versioning-configuration Status=Enabled

        aws dynamodb create-table \
          --table-name terraform-locks \
          --attribute-definitions AttributeName=LockID,AttributeType=S \
          --key-schema AttributeName=LockID,KeyType=HASH \
          --billing-mode PAY_PER_REQUEST \
          --region us-east-1 || true

    # Terraform Init
    - name: 'Initialize Terraform'
      id: init
      run: 'terraform init'
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    # Terraform Plan
    - name: 'Terraform Plan'
      id: plan
      if: |
        (always()) ||
        (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main') ||
        (github.event_name == 'push' && github.ref_name != 'main')
      continue-on-error: true
      env:
        TF_VAR_db_username: ${{ github.event.inputs.db_username }}
        TF_VAR_db_password: ${{ github.event.inputs.db_password }}
        TF_VAR_db_root_password: ${{ github.event.inputs.db_root_password }}
        TF_VAR_db_host: ${{ github.event.inputs.db_host }}
        TF_VAR_db_port: 3306
        TF_VAR_db_name: ${{ github.event.inputs.db_name }}
        TF_VAR_flask_secret: ${{ github.event.inputs.flask_secret }}
      run: |
        set -o pipefail
        terraform plan -no-color -var-file="./${{ inputs.env }}/terraform.tfvars" | tee plan.log

    # Plan status
    - name: 'Terraform Plan Status'
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
#      if: ${{ github.event.inputs.service == 'EKS' }}
      id: apply
      if: (( github.ref == 'refs/heads/main' || github.ref == 'main' ) && github.event.pull_request.merged )
      env:
          TF_VAR_db_username: ${{ github.event.inputs.db_username }}
          TF_VAR_db_password: ${{ github.event.inputs.db_password }}
          TF_VAR_db_root_password: ${{ github.event.inputs.db_root_password }}
          TF_VAR_db_host: ${{ github.event.inputs.db_host }}
          TF_VAR_db_port: ${{ github.event.inputs.db_port }}
          TF_VAR_db_name: ${{ github.event.inputs.db_name }}
          TF_VAR_flask_secret: ${{ github.event.inputs.flask_secret }}
      run: |
        set -o pipefail
        terrafrm apply -var-file="terraform.tfvars" -auto-approve
        continue-on-error: true